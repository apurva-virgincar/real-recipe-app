{"version":3,"sources":["components/Navigation/index.js","constants/routes.js","components/Landing/index.js","components/SignIn/index.js","components/SignUp/index.js","components/Home/index.js","components/Account/index.js","components/Admin/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["Navigation","to","Landing","SignIn","SignUp","Home","Account","Admin","App","exact","path","component","LandingPage","SignUpPage","SignInPage","HomePage","AccountPage","AdminPage","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","self","addEventListener","event","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"0OA2BeA,EAvBI,kBAEf,6BACA,4BACE,4BACE,kBAAC,IAAD,CAAMC,GCPS,WDOf,YAEF,4BACE,kBAAC,IAAD,CAAMA,GCZS,KDYf,YAEF,4BACE,kBAAC,IAAD,CAAMA,GCZM,SDYZ,SAEF,4BACE,kBAAC,IAAD,CAAMA,GCdS,YDcf,YAEF,4BACE,kBAAC,IAAD,CAAMA,GChBO,UDgBb,aEbOC,EAND,kBACV,yCCKWC,EANF,kBACT,wCCKWC,EANF,kBACT,wCCKWC,EANJ,kBACP,sCCKWC,EAND,kBACV,yCCKWC,EANH,kBACR,uCC4BWC,EAfL,kBACN,kBAAC,IAAD,KACI,6BACD,kBAAC,EAAD,MACC,6BACA,kBAAC,IAAD,CAAOC,OAAK,EAACC,KPrBE,IOqBoBC,UAAWC,IAChD,kBAAC,IAAD,CAAOF,KPrBU,UOqBYC,UAAWE,IACxC,kBAAC,IAAD,CAAOH,KPrBU,UOqBYC,UAAWG,IACxC,kBAAC,IAAD,CAAOJ,KPrBO,QOqBYC,UAAWI,IACrC,kBAAC,IAAD,CAAOL,KPrBU,WOqBYC,UAAWK,IACxC,kBAAC,IAAD,CAAON,KPrBQ,SOqBYC,UAAWM,OCbtCC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MA6CjEC,KAAKC,iBAAiB,SAAS,SAASC,OCxIxCC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDanB,SAAkBzB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIyB,IAAIC,GAAwBjC,OAAOC,SAASiC,MACpDC,SAAWnC,OAAOC,SAASkC,OAIvC,OAGFnC,OAAOyB,iBAAiB,QAAQ,WAC9B,IAAMpB,EAAK,UAAM4B,GAAN,sBAEPnC,IAgEV,SAAiCO,EAAOC,GAEtC8B,MAAM/B,EAAO,CACXgC,QAAS,CAAE,iBAAkB,YAE5B3B,MAAK,SAAA4B,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CnC,UAAUC,cAAcmC,MAAMjC,MAAK,SAAAC,GACjCA,EAAaiC,aAAalC,MAAK,WAC7BV,OAAOC,SAAS4C,eAKpBzC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFA2B,CAAwBzC,EAAOC,GAI/BC,UAAUC,cAAcmC,MAAMjC,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OCnC/BE,K","file":"static/js/main.16f33a8b.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport * as ROUTES from '../../constants/routes';\r\n\r\nconst Navigation = () =>\r\n(\r\n    <div>\r\n    <ul>\r\n      <li>\r\n        <Link to={ROUTES.SIGN_IN}>Sign In</Link>\r\n      </li>\r\n      <li>\r\n        <Link to={ROUTES.LANDING}>Landing</Link>\r\n      </li>\r\n      <li>\r\n        <Link to={ROUTES.HOME}>Home</Link>\r\n      </li>\r\n      <li>\r\n        <Link to={ROUTES.ACCOUNT}>Account</Link>\r\n      </li>\r\n      <li>\r\n        <Link to={ROUTES.ADMIN}>Admin</Link>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n);\r\n\r\nexport default Navigation;","export const LANDING = '/';\r\nexport const SIGN_UP = '/signup';\r\nexport const SIGN_IN = '/signin';\r\nexport const HOME = '/home';\r\nexport const ACCOUNT = '/account';\r\nexport const ADMIN = '/admin';\r\nexport const PASSWORD_FORGET = '/pw-forget';","import React from 'react';\r\n\r\nconst Landing=()=>(\r\n    <div>\r\n        Landing\r\n    </div>\r\n);\r\n\r\nexport default Landing;","import React from 'react';\r\n\r\nconst SignIn=()=>(\r\n    <div>\r\n        SignIn\r\n    </div>\r\n);\r\n\r\nexport default SignIn;","import React from 'react';\r\n\r\nconst SignUp=()=>(\r\n    <div>\r\n        SignUp\r\n    </div>\r\n);\r\n\r\nexport default SignUp;","import React from 'react';\r\n\r\nconst Home=()=>(\r\n    <div>\r\n        Home\r\n    </div>\r\n);\r\n\r\nexport default Home;","import React from 'react';\r\n\r\nconst Account=()=>(\r\n    <div>\r\n        Account\r\n    </div>\r\n);\r\n\r\nexport default Account;","import React from 'react';\r\n\r\nconst Admin=()=>(\r\n    <div>\r\n        Admin\r\n    </div>\r\n);\r\n\r\nexport default Admin;","/* eslint-disable react/jsx-no-comment-textnodes */\r\nimport React from 'react';\r\nimport { BrowserRouter as Router,Route } from 'react-router-dom';\r\n\r\nimport Navigation from '../Navigation';\r\nimport LandingPage from '../Landing';\r\nimport SignInPage from '../SignIn';\r\nimport SignUpPage from '../SignUp';\r\n//import PasswordForgetPage from '../';\r\nimport HomePage from '../Home';\r\nimport AccountPage from '../Account';\r\nimport AdminPage from '../Admin';\r\n\r\n\r\nimport * as ROUTES from '../../constants/routes';\r\n\r\nconst App=()=>(\r\n    <Router>\r\n        <div>\r\n       <Navigation/>\r\n        <hr/>\r\n        <Route exact path={ROUTES.LANDING} component={LandingPage} />\r\n      <Route path={ROUTES.SIGN_UP} component={SignUpPage} />\r\n      <Route path={ROUTES.SIGN_IN} component={SignInPage} />      \r\n      <Route path={ROUTES.HOME} component={HomePage} />\r\n      <Route path={ROUTES.ACCOUNT} component={AccountPage} />\r\n      <Route path={ROUTES.ADMIN} component={AdminPage} />\r\n    </div>\r\n    </Router>\r\n);\r\n\r\nexport default App;","/* eslint-disable no-restricted-globals */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\nself.addEventListener('fetch', function(event) {});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}